{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.startX = null; // for swipe\n        this.startY = null;\n        this.endX = null;\n        this.endY = null;\n        // eslint-disable-next-line no-console\n        this.initializeBoard();\n        this.addKeyboardListeners();\n        this.handleSwipe();\n        const gameField = document.querySelector(\".game-field\"); // swipe\n        gameField.addEventListener(\"touchstart\", this.handleTouchStart.bind(this));\n        gameField.addEventListener(\"touchend\", this.handleTouchEnd.bind(this));\n    }\n    // swipe start\n    handleTouchStart(e) {\n        this.startX = e.touches[0].clientX;\n        this.startY = e.touches[0].clientY;\n    }\n    handleTouchEnd(e) {\n        this.endX = e.changedTouches[0].clientX;\n        this.endY = e.changedTouches[0].clientY;\n        this.handleSwipe();\n    }\n    handleSwipe() {\n        const dx = this.endX - this.startX;\n        const dy = this.endY - this.startY;\n        if (Math.abs(dx) > Math.abs(dy)) {\n            // Horizontal swipe\n            if (dx > 0) this.moveRight();\n            else this.moveLeft();\n            this.boardMessage();\n        } else {\n            // Vertical swipe\n            if (dy > 0) this.moveDown();\n            else this.moveUp();\n            this.boardMessage();\n        }\n    }\n    initializeBoard() {\n        this.rows = 4;\n        this.columns = 4;\n        this.getState();\n        this.getScore();\n    }\n    findEmptyCells() {\n        const isEmpty = [];\n        for(let i = 0; i < this.rows; i++){\n            for(let j = 0; j < this.columns; j++)if (this.board[i][j] === 0) isEmpty.push({\n                row: i,\n                column: j\n            });\n        }\n        return isEmpty;\n    }\n    createCell() {\n        const emptyCells = this.findEmptyCells();\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const randomCell = emptyCells[randomIndex];\n            const randomNumber = this.generateRandomNumber();\n            this.board[randomCell.row][randomCell.column] = randomNumber;\n            emptyCells.splice(emptyCells.indexOf(randomCell), 1);\n        }\n    }\n    generateRandomNumber() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    renderBoard() {\n        const boardElement = document.querySelector(\".game-field tbody\");\n        boardElement.innerHTML = \"\";\n        for(let i = 0; i < this.rows; i++){\n            const row = document.createElement(\"tr\");\n            for(let j = 0; j < this.columns; j++){\n                const tile = document.createElement(\"td\");\n                tile.classList.add(\"field-cell\");\n                const value = this.board[i][j];\n                tile.innerText = value || \"\";\n                if (value) {\n                    tile.classList.add(`field-cell--${value}`);\n                    tile.classList.add(`field-cell--active`);\n                }\n                tile.class = i.toString() + \"-\" + j.toString();\n                row.appendChild(tile);\n            }\n            boardElement.appendChild(row);\n        }\n    }\n    addKeyboardListeners() {\n        document.addEventListener(\"keydown\", (press)=>{\n            if (press.key === \"ArrowLeft\") this.moveLeft();\n            if (press.key === \"ArrowRight\") this.moveRight();\n            if (press.key === \"ArrowUp\") this.moveUp();\n            if (press.key === \"ArrowDown\") this.moveDown();\n            this.boardMessage();\n        });\n    }\n    filterZeroRow(row) {\n        return row.filter((num)=>num !== 0);\n    }\n    slideLeft(row) {\n        let filteredRow = this.filterZeroRow(row);\n        for(let i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n            filteredRow[i] *= 2;\n            filteredRow[i + 1] = 0;\n            this.score += filteredRow[i];\n        }\n        filteredRow = this.filterZeroRow(filteredRow);\n        while(filteredRow.length < this.columns)filteredRow.push(0);\n        return filteredRow;\n    }\n    moveLeft() {\n        const previousBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        for(let i = 0; i < this.rows; i++){\n            let row = this.board[i];\n            row = this.slideLeft(row);\n            this.board[i] = row;\n        }\n        const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n        if (boardChanged && !this.isWinner()) this.createCell();\n        this.renderBoard();\n        this.updateScore();\n    }\n    areArraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        for(let i = 0; i < arr1.length; i++){\n            if (!arr1[i].every((val, index)=>val === arr2[i][index])) return false;\n        }\n        return true;\n    }\n    slideRight(row) {\n        let filteredRow = this.filterZeroRow(row);\n        for(let j = filteredRow.length - 1; j > 0; j--)if (filteredRow[j] === filteredRow[j - 1]) {\n            filteredRow[j] *= 2;\n            filteredRow[j - 1] = 0;\n            this.score += filteredRow[j];\n        }\n        filteredRow = this.filterZeroRow(filteredRow);\n        while(filteredRow.length < this.columns)filteredRow.unshift(0);\n        return filteredRow;\n    }\n    moveRight() {\n        const previousBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        for(let j = 0; j < this.rows; j++){\n            let row = this.board[j];\n            row = this.slideRight(row);\n            this.board[j] = row;\n        }\n        const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n        if (boardChanged && !this.isWinner()) this.createCell();\n        this.renderBoard();\n        this.updateScore();\n    }\n    filterZeroColunms(columns) {\n        if (columns && columns.length) return columns.filter((num)=>num !== 0);\n        else return [];\n    }\n    slideUp(columns) {\n        let filteredColumns = this.filterZeroColunms(columns);\n        for(let i = 0; i < filteredColumns.length; i++)if (filteredColumns[i] === filteredColumns[i + 1]) {\n            filteredColumns[i] *= 2;\n            filteredColumns[i + 1] = 0;\n            this.score += filteredColumns[i];\n        }\n        filteredColumns = this.filterZeroColunms(filteredColumns);\n        while(filteredColumns.length < this.rows)filteredColumns.push(0);\n        return filteredColumns;\n    }\n    transpose(matrix) {\n        return matrix[0].map((col, j)=>matrix.map((row)=>row[j]));\n    }\n    moveUp() {\n        const previousBoard = this.board.map((column)=>[\n                ...column\n            ]);\n        const transposedBoard = this.transpose(this.board);\n        for(let i = 0; i < this.rows; i++){\n            let column = transposedBoard[i];\n            column = this.slideUp(column);\n            transposedBoard[i] = column;\n        }\n        this.board = this.transpose(transposedBoard);\n        const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n        if (boardChanged && !this.isWinner()) this.createCell();\n        this.renderBoard();\n        this.updateScore();\n    }\n    slideDown(columns) {\n        let filteredColumns = this.filterZeroColunms(columns);\n        for(let j = filteredColumns.length - 1; j > 0; j--)if (filteredColumns[j] === filteredColumns[j - 1]) {\n            filteredColumns[j] *= 2;\n            filteredColumns[j - 1] = 0;\n            this.score += filteredColumns[j];\n        }\n        filteredColumns = this.filterZeroColunms(filteredColumns);\n        while(filteredColumns.length < this.rows)filteredColumns.unshift(0);\n        return filteredColumns;\n    }\n    moveDown() {\n        const previousBoard = this.board.map((column)=>[\n                ...column\n            ]);\n        const transposedBoard = this.transpose(this.board);\n        for(let i = 0; i < this.rows; i++){\n            let column = transposedBoard[i];\n            column = this.slideDown(column);\n            transposedBoard[i] = column;\n        }\n        this.board = this.transpose(transposedBoard);\n        const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n        if (boardChanged && !this.isWinner()) this.createCell();\n        this.renderBoard();\n        this.updateScore();\n    }\n    updateScore() {\n        const scoreElement = document.querySelector(\".game-score\");\n        scoreElement.innerText = this.score;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score = 0;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        const gameover = this.isGameOver();\n        const isWinner = this.isWinner();\n        if (this.isBoardEmpty()) return \"idle\";\n        else if (gameover && isWinner) return \"win\";\n        else if (gameover) return \"lose\";\n        else return \"playing\";\n    }\n    boardMessage() {\n        const messageStart = document.querySelector(\".message-start\");\n        const messageLose = document.querySelector(\".message-lose\");\n        const messageWin = document.querySelector(\".message-win\");\n        if (this.isGameOver()) {\n            messageLose.classList.remove(\"hidden\");\n            messageStart.classList.add(\"hidden\");\n        }\n        if (this.isWinner()) {\n            messageStart.classList.add(\"hidden\");\n            messageWin.classList.remove(\"hidden\");\n        }\n    }\n    isWinner() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++){\n            if (this.board[i][j] === 2048) return true;\n        }\n        return false;\n    }\n    isGameOver() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++){\n            if (this.board[i][j] === 0) return false;\n            if (i !== this.rows - 1 && this.board[i][j] === this.board[i + 1][j]) return false;\n            if (j !== this.columns - 1 && this.board[i][j] === this.board[i][j + 1]) return false;\n        }\n        return true;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.isBoardEmpty()) {\n            this.createCell();\n            this.createCell();\n            this.renderBoard();\n        }\n    }\n    isBoardEmpty() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++){\n            if (this.board[i][j] !== 0) return false;\n        }\n        return true;\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const messageStart = document.querySelector(\".message-start\");\n        const messageLose = document.querySelector(\".message-lose\");\n        const messageWin = document.querySelector(\".message-win\");\n        if (!this.isBoardEmpty()) {\n            messageLose.classList.add(\"hidden\");\n            messageStart.classList.remove(\"hidden\");\n            messageWin.classList.add(\"hidden\");\n            this.initializeBoard();\n            this.updateScore();\n            this.renderBoard();\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    }\n}); // Write your code here\n\n\n//# sourceMappingURL=index.b491c6c7.js.map\n","'use strict';\n// Uncomment the next lines to use your game instance in the browser\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'idle') {\n    game.start();\n\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    messageStart.classList.add('hidden');\n  } else {\n    game.restart();\n\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.startX = null; // for swipe\n    this.startY = null;\n    this.endX = null;\n    this.endY = null;\n\n    // eslint-disable-next-line no-console\n    this.initializeBoard();\n    this.addKeyboardListeners();\n    this.handleSwipe();\n\n    const gameField = document.querySelector('.game-field'); // swipe\n\n    gameField.addEventListener('touchstart', this.handleTouchStart.bind(this));\n    gameField.addEventListener('touchend', this.handleTouchEnd.bind(this));\n  }\n\n  // swipe start\n  handleTouchStart(e) {\n    this.startX = e.touches[0].clientX;\n    this.startY = e.touches[0].clientY;\n  }\n\n  handleTouchEnd(e) {\n    this.endX = e.changedTouches[0].clientX;\n    this.endY = e.changedTouches[0].clientY;\n\n    this.handleSwipe();\n  }\n\n  handleSwipe() {\n    const dx = this.endX - this.startX;\n    const dy = this.endY - this.startY;\n\n    if (Math.abs(dx) > Math.abs(dy)) {\n      // Horizontal swipe\n      if (dx > 0) {\n        this.moveRight();\n      } else {\n        this.moveLeft();\n      }\n      this.boardMessage();\n    } else {\n      // Vertical swipe\n      if (dy > 0) {\n        this.moveDown();\n      } else {\n        this.moveUp();\n      }\n      this.boardMessage();\n    }\n  } // swipe end\n\n  initializeBoard() {\n    this.rows = 4;\n    this.columns = 4;\n    this.getState();\n    this.getScore();\n  }\n\n  findEmptyCells() {\n    const isEmpty = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] === 0) {\n          isEmpty.push({ row: i, column: j });\n        }\n      }\n    }\n\n    return isEmpty;\n  }\n\n  createCell() {\n    const emptyCells = this.findEmptyCells();\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const randomCell = emptyCells[randomIndex];\n\n      const randomNumber = this.generateRandomNumber();\n\n      this.board[randomCell.row][randomCell.column] = randomNumber;\n\n      emptyCells.splice(emptyCells.indexOf(randomCell), 1);\n    }\n  }\n\n  generateRandomNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  renderBoard() {\n    const boardElement = document.querySelector('.game-field tbody');\n\n    boardElement.innerHTML = '';\n\n    for (let i = 0; i < this.rows; i++) {\n      const row = document.createElement('tr');\n\n      for (let j = 0; j < this.columns; j++) {\n        const tile = document.createElement('td');\n\n        tile.classList.add('field-cell');\n\n        const value = this.board[i][j];\n\n        tile.innerText = value || '';\n\n        if (value) {\n          tile.classList.add(`field-cell--${value}`);\n          tile.classList.add(`field-cell--active`);\n        }\n\n        tile.class = i.toString() + '-' + j.toString();\n        row.appendChild(tile);\n      }\n      boardElement.appendChild(row);\n    }\n  }\n\n  addKeyboardListeners() {\n    document.addEventListener('keydown', (press) => {\n      if (press.key === 'ArrowLeft') {\n        this.moveLeft();\n      }\n\n      if (press.key === 'ArrowRight') {\n        this.moveRight();\n      }\n\n      if (press.key === 'ArrowUp') {\n        this.moveUp();\n      }\n\n      if (press.key === 'ArrowDown') {\n        this.moveDown();\n      }\n      this.boardMessage();\n    });\n  }\n\n  filterZeroRow(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  slideLeft(row) {\n    let filteredRow = this.filterZeroRow(row);\n\n    for (let i = 0; i < filteredRow.length; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        filteredRow[i + 1] = 0;\n        this.score += filteredRow[i];\n      }\n    }\n\n    filteredRow = this.filterZeroRow(filteredRow);\n\n    while (filteredRow.length < this.columns) {\n      filteredRow.push(0);\n    }\n\n    return filteredRow;\n  }\n\n  moveLeft() {\n    const previousBoard = this.board.map((row) => [...row]);\n\n    for (let i = 0; i < this.rows; i++) {\n      let row = this.board[i];\n\n      row = this.slideLeft(row);\n      this.board[i] = row;\n    }\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (!arr1[i].every((val, index) => val === arr2[i][index])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  slideRight(row) {\n    let filteredRow = this.filterZeroRow(row);\n\n    for (let j = filteredRow.length - 1; j > 0; j--) {\n      if (filteredRow[j] === filteredRow[j - 1]) {\n        filteredRow[j] *= 2;\n        filteredRow[j - 1] = 0;\n        this.score += filteredRow[j];\n      }\n    }\n\n    filteredRow = this.filterZeroRow(filteredRow);\n\n    while (filteredRow.length < this.columns) {\n      filteredRow.unshift(0);\n    }\n\n    return filteredRow;\n  }\n\n  moveRight() {\n    const previousBoard = this.board.map((row) => [...row]);\n\n    for (let j = 0; j < this.rows; j++) {\n      let row = this.board[j];\n\n      row = this.slideRight(row);\n\n      this.board[j] = row;\n    }\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  filterZeroColunms(columns) {\n    if (columns && columns.length) {\n      return columns.filter((num) => num !== 0);\n    } else {\n      return [];\n    }\n  }\n\n  slideUp(columns) {\n    let filteredColumns = this.filterZeroColunms(columns);\n\n    for (let i = 0; i < filteredColumns.length; i++) {\n      if (filteredColumns[i] === filteredColumns[i + 1]) {\n        filteredColumns[i] *= 2;\n        filteredColumns[i + 1] = 0;\n        this.score += filteredColumns[i];\n      }\n    }\n\n    filteredColumns = this.filterZeroColunms(filteredColumns);\n\n    while (filteredColumns.length < this.rows) {\n      filteredColumns.push(0);\n    }\n\n    return filteredColumns;\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((col, j) => matrix.map((row) => row[j]));\n  }\n\n  moveUp() {\n    const previousBoard = this.board.map((column) => [...column]);\n\n    const transposedBoard = this.transpose(this.board);\n\n    for (let i = 0; i < this.rows; i++) {\n      let column = transposedBoard[i];\n\n      column = this.slideUp(column);\n      transposedBoard[i] = column;\n    }\n\n    this.board = this.transpose(transposedBoard);\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  slideDown(columns) {\n    let filteredColumns = this.filterZeroColunms(columns);\n\n    for (let j = filteredColumns.length - 1; j > 0; j--) {\n      if (filteredColumns[j] === filteredColumns[j - 1]) {\n        filteredColumns[j] *= 2;\n        filteredColumns[j - 1] = 0;\n        this.score += filteredColumns[j];\n      }\n    }\n\n    filteredColumns = this.filterZeroColunms(filteredColumns);\n\n    while (filteredColumns.length < this.rows) {\n      filteredColumns.unshift(0);\n    }\n\n    return filteredColumns;\n  }\n\n  moveDown() {\n    const previousBoard = this.board.map((column) => [...column]);\n\n    const transposedBoard = this.transpose(this.board);\n\n    for (let i = 0; i < this.rows; i++) {\n      let column = transposedBoard[i];\n\n      column = this.slideDown(column);\n      transposedBoard[i] = column;\n    }\n\n    this.board = this.transpose(transposedBoard);\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  updateScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.innerText = this.score;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return (this.score = 0);\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const gameover = this.isGameOver();\n    const isWinner = this.isWinner();\n\n    if (this.isBoardEmpty()) {\n      return 'idle';\n    } else if (gameover && isWinner) {\n      return 'win';\n    } else if (gameover) {\n      return 'lose';\n    } else {\n      return 'playing';\n    }\n  }\n\n  boardMessage() {\n    const messageStart = document.querySelector('.message-start');\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (this.isGameOver()) {\n      messageLose.classList.remove('hidden');\n      messageStart.classList.add('hidden');\n    }\n\n    if (this.isWinner()) {\n      messageStart.classList.add('hidden');\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  isWinner() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isGameOver() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] === 0) {\n          return false;\n        }\n\n        if (i !== this.rows - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return false;\n        }\n\n        if (\n          j !== this.columns - 1 &&\n          this.board[i][j] === this.board[i][j + 1]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.isBoardEmpty()) {\n      this.createCell();\n      this.createCell();\n      this.renderBoard();\n    }\n  }\n\n  isBoardEmpty() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] !== 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const messageStart = document.querySelector('.message-start');\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (!this.isBoardEmpty()) {\n      messageLose.classList.add('hidden');\n      messageStart.classList.remove('hidden');\n      messageWin.classList.add('hidden');\n      this.initializeBoard();\n      this.updateScore();\n      this.renderBoard();\n    }\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","startX","startY","endX","endY","initializeBoard","addKeyboardListeners","handleSwipe","gameField","document","querySelector","addEventListener","handleTouchStart","bind","handleTouchEnd","e","touches","clientX","clientY","changedTouches","dx","dy","Math","abs","moveRight","moveLeft","moveDown","moveUp","boardMessage","rows","columns","getState","getScore","findEmptyCells","isEmpty","i","j","board","push","row","column","createCell","emptyCells","length","randomIndex","floor","random","randomCell","randomNumber","generateRandomNumber","splice","indexOf","renderBoard","boardElement","innerHTML","createElement","tile","classList","add","value","innerText","class","toString","appendChild","press","key","filterZeroRow","filter","num","slideLeft","filteredRow","score","previousBoard","map","areArraysEqual","isWinner","updateScore","arr1","arr2","every","val","index","slideRight","unshift","filterZeroColunms","slideUp","filteredColumns","transpose","matrix","col","transposedBoard","slideDown","scoreElement","getStatus","gameover","isGameOver","isBoardEmpty","messageStart","messageLose","messageWin","remove","start","restart","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageStart","gameStatus","textContent"],"version":3,"file":"index.b491c6c7.js.map"}