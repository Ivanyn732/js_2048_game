{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_type_of.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\nfunction $0b5c99e6a0876eaa$export$5f0017c582d45a2d(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.startX = null; // for swipe\n        this.startY = null;\n        this.endX = null;\n        this.endY = null;\n        // eslint-disable-next-line no-console\n        this.initializeBoard();\n        this.addKeyboardListeners();\n        this.handleSwipe();\n        var gameField = document.querySelector(\".game-field\"); // swipe\n        gameField.addEventListener(\"touchstart\", this.handleTouchStart.bind(this));\n        gameField.addEventListener(\"touchend\", this.handleTouchEnd.bind(this));\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            // swipe start\n            key: \"handleTouchStart\",\n            value: function handleTouchStart(e) {\n                this.startX = e.touches[0].clientX;\n                this.startY = e.touches[0].clientY;\n            }\n        },\n        {\n            key: \"handleTouchEnd\",\n            value: function handleTouchEnd(e) {\n                this.endX = e.changedTouches[0].clientX;\n                this.endY = e.changedTouches[0].clientY;\n                this.handleSwipe();\n            }\n        },\n        {\n            key: \"handleSwipe\",\n            value: function handleSwipe() {\n                var dx = this.endX - this.startX;\n                var dy = this.endY - this.startY;\n                if (Math.abs(dx) > Math.abs(dy)) {\n                    // Horizontal swipe\n                    if (dx > 0) this.moveRight();\n                    else this.moveLeft();\n                    this.boardMessage();\n                } else {\n                    // Vertical swipe\n                    if (dy > 0) this.moveDown();\n                    else this.moveUp();\n                    this.boardMessage();\n                }\n            } // swipe end\n        },\n        {\n            key: \"initializeBoard\",\n            value: function initializeBoard() {\n                this.rows = 4;\n                this.columns = 4;\n                this.getState();\n                this.getScore();\n            }\n        },\n        {\n            key: \"findEmptyCells\",\n            value: function findEmptyCells() {\n                var isEmpty = [];\n                for(var i = 0; i < this.rows; i++){\n                    for(var j = 0; j < this.columns; j++)if (this.board[i][j] === 0) isEmpty.push({\n                        row: i,\n                        column: j\n                    });\n                }\n                return isEmpty;\n            }\n        },\n        {\n            key: \"createCell\",\n            value: function createCell() {\n                var emptyCells = this.findEmptyCells();\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var randomCell = emptyCells[randomIndex];\n                    var randomNumber = this.generateRandomNumber();\n                    this.board[randomCell.row][randomCell.column] = randomNumber;\n                    emptyCells.splice(emptyCells.indexOf(randomCell), 1);\n                }\n            }\n        },\n        {\n            key: \"generateRandomNumber\",\n            value: function generateRandomNumber() {\n                return Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"renderBoard\",\n            value: function renderBoard() {\n                var boardElement = document.querySelector(\".game-field tbody\");\n                boardElement.innerHTML = \"\";\n                for(var i = 0; i < this.rows; i++){\n                    var row = document.createElement(\"tr\");\n                    for(var j = 0; j < this.columns; j++){\n                        var tile = document.createElement(\"td\");\n                        tile.classList.add(\"field-cell\");\n                        var value = this.board[i][j];\n                        tile.innerText = value || \"\";\n                        if (value) {\n                            tile.classList.add(\"field-cell--\".concat(value));\n                            tile.classList.add(\"field-cell--active\");\n                        }\n                        tile.class = i.toString() + \"-\" + j.toString();\n                        row.appendChild(tile);\n                    }\n                    boardElement.appendChild(row);\n                }\n            }\n        },\n        {\n            key: \"addKeyboardListeners\",\n            value: function addKeyboardListeners() {\n                var _this = this;\n                document.addEventListener(\"keydown\", function(press) {\n                    if (press.key === \"ArrowLeft\") _this.moveLeft();\n                    if (press.key === \"ArrowRight\") _this.moveRight();\n                    if (press.key === \"ArrowUp\") _this.moveUp();\n                    if (press.key === \"ArrowDown\") _this.moveDown();\n                    _this.boardMessage();\n                });\n            }\n        },\n        {\n            key: \"filterZeroRow\",\n            value: function filterZeroRow(row) {\n                return row.filter(function(num) {\n                    return num !== 0;\n                });\n            }\n        },\n        {\n            key: \"slideLeft\",\n            value: function slideLeft(row) {\n                var filteredRow = this.filterZeroRow(row);\n                for(var i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                    filteredRow[i] *= 2;\n                    filteredRow[i + 1] = 0;\n                    this.score += filteredRow[i];\n                }\n                filteredRow = this.filterZeroRow(filteredRow);\n                while(filteredRow.length < this.columns)filteredRow.push(0);\n                return filteredRow;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var previousBoard = this.board.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                for(var i = 0; i < this.rows; i++){\n                    var row = this.board[i];\n                    row = this.slideLeft(row);\n                    this.board[i] = row;\n                }\n                var boardChanged = !this.areArraysEqual(previousBoard, this.board);\n                if (boardChanged && !this.isWinner()) this.createCell();\n                this.renderBoard();\n                this.updateScore();\n            }\n        },\n        {\n            key: \"areArraysEqual\",\n            value: function areArraysEqual(arr1, arr2) {\n                var _loop = function(i) {\n                    if (!arr1[i].every(function(val, index) {\n                        return val === arr2[i][index];\n                    })) return {\n                        v: false\n                    };\n                };\n                if (arr1.length !== arr2.length) return false;\n                for(var i = 0; i < arr1.length; i++){\n                    var _ret = _loop(i);\n                    if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"slideRight\",\n            value: function slideRight(row) {\n                var filteredRow = this.filterZeroRow(row);\n                for(var j = filteredRow.length - 1; j > 0; j--)if (filteredRow[j] === filteredRow[j - 1]) {\n                    filteredRow[j] *= 2;\n                    filteredRow[j - 1] = 0;\n                    this.score += filteredRow[j];\n                }\n                filteredRow = this.filterZeroRow(filteredRow);\n                while(filteredRow.length < this.columns)filteredRow.unshift(0);\n                return filteredRow;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var previousBoard = this.board.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n                for(var j = 0; j < this.rows; j++){\n                    var row = this.board[j];\n                    row = this.slideRight(row);\n                    this.board[j] = row;\n                }\n                var boardChanged = !this.areArraysEqual(previousBoard, this.board);\n                if (boardChanged && !this.isWinner()) this.createCell();\n                this.renderBoard();\n                this.updateScore();\n            }\n        },\n        {\n            key: \"filterZeroColunms\",\n            value: function filterZeroColunms(columns) {\n                if (columns && columns.length) return columns.filter(function(num) {\n                    return num !== 0;\n                });\n                else return [];\n            }\n        },\n        {\n            key: \"slideUp\",\n            value: function slideUp(columns) {\n                var filteredColumns = this.filterZeroColunms(columns);\n                for(var i = 0; i < filteredColumns.length; i++)if (filteredColumns[i] === filteredColumns[i + 1]) {\n                    filteredColumns[i] *= 2;\n                    filteredColumns[i + 1] = 0;\n                    this.score += filteredColumns[i];\n                }\n                filteredColumns = this.filterZeroColunms(filteredColumns);\n                while(filteredColumns.length < this.rows)filteredColumns.push(0);\n                return filteredColumns;\n            }\n        },\n        {\n            key: \"transpose\",\n            value: function transpose(matrix) {\n                return matrix[0].map(function(col, j) {\n                    return matrix.map(function(row) {\n                        return row[j];\n                    });\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var previousBoard = this.board.map(function(column) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(column);\n                });\n                var transposedBoard = this.transpose(this.board);\n                for(var i = 0; i < this.rows; i++){\n                    var column = transposedBoard[i];\n                    column = this.slideUp(column);\n                    transposedBoard[i] = column;\n                }\n                this.board = this.transpose(transposedBoard);\n                var boardChanged = !this.areArraysEqual(previousBoard, this.board);\n                if (boardChanged && !this.isWinner()) this.createCell();\n                this.renderBoard();\n                this.updateScore();\n            }\n        },\n        {\n            key: \"slideDown\",\n            value: function slideDown(columns) {\n                var filteredColumns = this.filterZeroColunms(columns);\n                for(var j = filteredColumns.length - 1; j > 0; j--)if (filteredColumns[j] === filteredColumns[j - 1]) {\n                    filteredColumns[j] *= 2;\n                    filteredColumns[j - 1] = 0;\n                    this.score += filteredColumns[j];\n                }\n                filteredColumns = this.filterZeroColunms(filteredColumns);\n                while(filteredColumns.length < this.rows)filteredColumns.unshift(0);\n                return filteredColumns;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var previousBoard = this.board.map(function(column) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(column);\n                });\n                var transposedBoard = this.transpose(this.board);\n                for(var i = 0; i < this.rows; i++){\n                    var column = transposedBoard[i];\n                    column = this.slideDown(column);\n                    transposedBoard[i] = column;\n                }\n                this.board = this.transpose(transposedBoard);\n                var boardChanged = !this.areArraysEqual(previousBoard, this.board);\n                if (boardChanged && !this.isWinner()) this.createCell();\n                this.renderBoard();\n                this.updateScore();\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore() {\n                var scoreElement = document.querySelector(\".game-score\");\n                scoreElement.innerText = this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score = 0;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var gameover = this.isGameOver();\n                var isWinner = this.isWinner();\n                if (this.isBoardEmpty()) return \"idle\";\n                else if (gameover && isWinner) return \"win\";\n                else if (gameover) return \"lose\";\n                else return \"playing\";\n            }\n        },\n        {\n            key: \"boardMessage\",\n            value: function boardMessage() {\n                var messageStart = document.querySelector(\".message-start\");\n                var messageLose = document.querySelector(\".message-lose\");\n                var messageWin = document.querySelector(\".message-win\");\n                if (this.isGameOver()) {\n                    messageLose.classList.remove(\"hidden\");\n                    messageStart.classList.add(\"hidden\");\n                }\n                if (this.isWinner()) {\n                    messageStart.classList.add(\"hidden\");\n                    messageWin.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"isWinner\",\n            value: function isWinner() {\n                for(var i = 0; i < this.rows; i++)for(var j = 0; j < this.columns; j++){\n                    if (this.board[i][j] === 2048) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                for(var i = 0; i < this.rows; i++)for(var j = 0; j < this.columns; j++){\n                    if (this.board[i][j] === 0) return false;\n                    if (i !== this.rows - 1 && this.board[i][j] === this.board[i + 1][j]) return false;\n                    if (j !== this.columns - 1 && this.board[i][j] === this.board[i][j + 1]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.isBoardEmpty()) {\n                    this.createCell();\n                    this.createCell();\n                    this.renderBoard();\n                }\n            }\n        },\n        {\n            key: \"isBoardEmpty\",\n            value: function isBoardEmpty() {\n                for(var i = 0; i < this.rows; i++)for(var j = 0; j < this.columns; j++){\n                    if (this.board[i][j] !== 0) return false;\n                }\n                return true;\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var messageStart = document.querySelector(\".message-start\");\n                var messageLose = document.querySelector(\".message-lose\");\n                var messageWin = document.querySelector(\".message-win\");\n                if (!this.isBoardEmpty()) {\n                    messageLose.classList.add(\"hidden\");\n                    messageStart.classList.remove(\"hidden\");\n                    messageWin.classList.add(\"hidden\");\n                    this.initializeBoard();\n                    this.updateScore();\n                    this.renderBoard();\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    if (gameStatus === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$startButton.classList.remove(\"restart\");\n        $197cd56b15c33885$var$startButton.classList.add(\"start\");\n        $197cd56b15c33885$var$startButton.textContent = \"Start\";\n    }\n}); // Write your code here\n\n})();\n//# sourceMappingURL=index.ed6c35a8.js.map\n","'use strict';\n// Uncomment the next lines to use your game instance in the browser\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'idle') {\n    game.start();\n\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    messageStart.classList.add('hidden');\n  } else {\n    game.restart();\n\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.startX = null; // for swipe\n    this.startY = null;\n    this.endX = null;\n    this.endY = null;\n\n    // eslint-disable-next-line no-console\n    this.initializeBoard();\n    this.addKeyboardListeners();\n    this.handleSwipe();\n\n    const gameField = document.querySelector('.game-field'); // swipe\n\n    gameField.addEventListener('touchstart', this.handleTouchStart.bind(this));\n    gameField.addEventListener('touchend', this.handleTouchEnd.bind(this));\n  }\n\n  // swipe start\n  handleTouchStart(e) {\n    this.startX = e.touches[0].clientX;\n    this.startY = e.touches[0].clientY;\n  }\n\n  handleTouchEnd(e) {\n    this.endX = e.changedTouches[0].clientX;\n    this.endY = e.changedTouches[0].clientY;\n\n    this.handleSwipe();\n  }\n\n  handleSwipe() {\n    const dx = this.endX - this.startX;\n    const dy = this.endY - this.startY;\n\n    if (Math.abs(dx) > Math.abs(dy)) {\n      // Horizontal swipe\n      if (dx > 0) {\n        this.moveRight();\n      } else {\n        this.moveLeft();\n      }\n      this.boardMessage();\n    } else {\n      // Vertical swipe\n      if (dy > 0) {\n        this.moveDown();\n      } else {\n        this.moveUp();\n      }\n      this.boardMessage();\n    }\n  } // swipe end\n\n  initializeBoard() {\n    this.rows = 4;\n    this.columns = 4;\n    this.getState();\n    this.getScore();\n  }\n\n  findEmptyCells() {\n    const isEmpty = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] === 0) {\n          isEmpty.push({ row: i, column: j });\n        }\n      }\n    }\n\n    return isEmpty;\n  }\n\n  createCell() {\n    const emptyCells = this.findEmptyCells();\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const randomCell = emptyCells[randomIndex];\n\n      const randomNumber = this.generateRandomNumber();\n\n      this.board[randomCell.row][randomCell.column] = randomNumber;\n\n      emptyCells.splice(emptyCells.indexOf(randomCell), 1);\n    }\n  }\n\n  generateRandomNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  renderBoard() {\n    const boardElement = document.querySelector('.game-field tbody');\n\n    boardElement.innerHTML = '';\n\n    for (let i = 0; i < this.rows; i++) {\n      const row = document.createElement('tr');\n\n      for (let j = 0; j < this.columns; j++) {\n        const tile = document.createElement('td');\n\n        tile.classList.add('field-cell');\n\n        const value = this.board[i][j];\n\n        tile.innerText = value || '';\n\n        if (value) {\n          tile.classList.add(`field-cell--${value}`);\n          tile.classList.add(`field-cell--active`);\n        }\n\n        tile.class = i.toString() + '-' + j.toString();\n        row.appendChild(tile);\n      }\n      boardElement.appendChild(row);\n    }\n  }\n\n  addKeyboardListeners() {\n    document.addEventListener('keydown', (press) => {\n      if (press.key === 'ArrowLeft') {\n        this.moveLeft();\n      }\n\n      if (press.key === 'ArrowRight') {\n        this.moveRight();\n      }\n\n      if (press.key === 'ArrowUp') {\n        this.moveUp();\n      }\n\n      if (press.key === 'ArrowDown') {\n        this.moveDown();\n      }\n      this.boardMessage();\n    });\n  }\n\n  filterZeroRow(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  slideLeft(row) {\n    let filteredRow = this.filterZeroRow(row);\n\n    for (let i = 0; i < filteredRow.length; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        filteredRow[i + 1] = 0;\n        this.score += filteredRow[i];\n      }\n    }\n\n    filteredRow = this.filterZeroRow(filteredRow);\n\n    while (filteredRow.length < this.columns) {\n      filteredRow.push(0);\n    }\n\n    return filteredRow;\n  }\n\n  moveLeft() {\n    const previousBoard = this.board.map((row) => [...row]);\n\n    for (let i = 0; i < this.rows; i++) {\n      let row = this.board[i];\n\n      row = this.slideLeft(row);\n      this.board[i] = row;\n    }\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  areArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (!arr1[i].every((val, index) => val === arr2[i][index])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  slideRight(row) {\n    let filteredRow = this.filterZeroRow(row);\n\n    for (let j = filteredRow.length - 1; j > 0; j--) {\n      if (filteredRow[j] === filteredRow[j - 1]) {\n        filteredRow[j] *= 2;\n        filteredRow[j - 1] = 0;\n        this.score += filteredRow[j];\n      }\n    }\n\n    filteredRow = this.filterZeroRow(filteredRow);\n\n    while (filteredRow.length < this.columns) {\n      filteredRow.unshift(0);\n    }\n\n    return filteredRow;\n  }\n\n  moveRight() {\n    const previousBoard = this.board.map((row) => [...row]);\n\n    for (let j = 0; j < this.rows; j++) {\n      let row = this.board[j];\n\n      row = this.slideRight(row);\n\n      this.board[j] = row;\n    }\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  filterZeroColunms(columns) {\n    if (columns && columns.length) {\n      return columns.filter((num) => num !== 0);\n    } else {\n      return [];\n    }\n  }\n\n  slideUp(columns) {\n    let filteredColumns = this.filterZeroColunms(columns);\n\n    for (let i = 0; i < filteredColumns.length; i++) {\n      if (filteredColumns[i] === filteredColumns[i + 1]) {\n        filteredColumns[i] *= 2;\n        filteredColumns[i + 1] = 0;\n        this.score += filteredColumns[i];\n      }\n    }\n\n    filteredColumns = this.filterZeroColunms(filteredColumns);\n\n    while (filteredColumns.length < this.rows) {\n      filteredColumns.push(0);\n    }\n\n    return filteredColumns;\n  }\n\n  transpose(matrix) {\n    return matrix[0].map((col, j) => matrix.map((row) => row[j]));\n  }\n\n  moveUp() {\n    const previousBoard = this.board.map((column) => [...column]);\n\n    const transposedBoard = this.transpose(this.board);\n\n    for (let i = 0; i < this.rows; i++) {\n      let column = transposedBoard[i];\n\n      column = this.slideUp(column);\n      transposedBoard[i] = column;\n    }\n\n    this.board = this.transpose(transposedBoard);\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  slideDown(columns) {\n    let filteredColumns = this.filterZeroColunms(columns);\n\n    for (let j = filteredColumns.length - 1; j > 0; j--) {\n      if (filteredColumns[j] === filteredColumns[j - 1]) {\n        filteredColumns[j] *= 2;\n        filteredColumns[j - 1] = 0;\n        this.score += filteredColumns[j];\n      }\n    }\n\n    filteredColumns = this.filterZeroColunms(filteredColumns);\n\n    while (filteredColumns.length < this.rows) {\n      filteredColumns.unshift(0);\n    }\n\n    return filteredColumns;\n  }\n\n  moveDown() {\n    const previousBoard = this.board.map((column) => [...column]);\n\n    const transposedBoard = this.transpose(this.board);\n\n    for (let i = 0; i < this.rows; i++) {\n      let column = transposedBoard[i];\n\n      column = this.slideDown(column);\n      transposedBoard[i] = column;\n    }\n\n    this.board = this.transpose(transposedBoard);\n\n    const boardChanged = !this.areArraysEqual(previousBoard, this.board);\n\n    if (boardChanged && !this.isWinner()) {\n      this.createCell();\n    }\n\n    this.renderBoard();\n    this.updateScore();\n  }\n\n  updateScore() {\n    const scoreElement = document.querySelector('.game-score');\n\n    scoreElement.innerText = this.score;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return (this.score = 0);\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const gameover = this.isGameOver();\n    const isWinner = this.isWinner();\n\n    if (this.isBoardEmpty()) {\n      return 'idle';\n    } else if (gameover && isWinner) {\n      return 'win';\n    } else if (gameover) {\n      return 'lose';\n    } else {\n      return 'playing';\n    }\n  }\n\n  boardMessage() {\n    const messageStart = document.querySelector('.message-start');\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (this.isGameOver()) {\n      messageLose.classList.remove('hidden');\n      messageStart.classList.add('hidden');\n    }\n\n    if (this.isWinner()) {\n      messageStart.classList.add('hidden');\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  isWinner() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isGameOver() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] === 0) {\n          return false;\n        }\n\n        if (i !== this.rows - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return false;\n        }\n\n        if (\n          j !== this.columns - 1 &&\n          this.board[i][j] === this.board[i][j + 1]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.isBoardEmpty()) {\n      this.createCell();\n      this.createCell();\n      this.renderBoard();\n    }\n  }\n\n  isBoardEmpty() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.board[i][j] !== 0) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const messageStart = document.querySelector('.message-start');\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (!this.isBoardEmpty()) {\n      messageLose.classList.add('hidden');\n      messageStart.classList.remove('hidden');\n      messageWin.classList.add('hidden');\n      this.initializeBoard();\n      this.updateScore();\n      this.renderBoard();\n    }\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","export function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$1b5e630bc3aea29f","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","startX","startY","endX","endY","initializeBoard","addKeyboardListeners","handleSwipe","gameField","document","querySelector","addEventListener","handleTouchStart","bind","handleTouchEnd","key","value","e","touches","clientX","clientY","changedTouches","dx","dy","Math","abs","moveRight","moveLeft","moveDown","moveUp","boardMessage","rows","columns","getState","getScore","isEmpty","j","board","push","row","column","emptyCells","findEmptyCells","randomIndex","floor","random","randomCell","randomNumber","generateRandomNumber","splice","indexOf","boardElement","innerHTML","createElement","tile","classList","add","innerText","concat","class","appendChild","_this","press","filter","num","filteredRow","filterZeroRow","score","previousBoard","map","slideLeft","areArraysEqual","isWinner","createCell","renderBoard","updateScore","arr1","_loop","every","val","index","v","_ret","obj","unshift","slideRight","filteredColumns","filterZeroColunms","matrix","col","transposedBoard","transpose","slideUp","slideDown","scoreElement","gameover","isGameOver","isBoardEmpty","messageStart","messageLose","messageWin","remove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$messageStart","gameStatus","getStatus","start","textContent","restart"],"version":3,"file":"index.ed6c35a8.js.map"}